var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = LMDiskANN","category":"page"},{"location":"#LMDiskANN","page":"Home","title":"LMDiskANN","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for LMDiskANN.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [LMDiskANN]\nPrivate = false","category":"page"},{"location":"#LMDiskANN.ann_delete!-Tuple{LMDiskANN.LMDiskANNIndex, Union{Int64, String}}","page":"Home","title":"LMDiskANN.ann_delete!","text":"ann_delete!(index::LMDiskANNIndex, node_id::Int)\n\nDelete a vector (and adjacency) from the index. Implements Algorithm 3 from the LM-DiskANN paper.\n\nArguments\n\nindex::LMDiskANNIndex: The index to delete from\nnode_id::Int: The ID of the vector to delete\n\nReturns\n\nLMDiskANNIndex: The updated index instance\n\nExample\n\nLMDiskANN.ann_delete!(index, id)\n\n\n\n\n\n","category":"method"},{"location":"#LMDiskANN.ann_insert!-Tuple{LMDiskANN.LMDiskANNIndex, Vector{Float32}}","page":"Home","title":"LMDiskANN.ann_insert!","text":"ann_insert!(index::LMDiskANNIndex, new_vec::Vector{Float32})\n\nInsert a new vector into the index. Updates the adjacency structure. Returns the assigned ID of the newly inserted vector. Implements Algorithm 2 from the LM-DiskANN paper.\n\nArguments\n\nindex::LMDiskANNIndex: The index to insert into\nnew_vec::Vector{Float32}: The vector to insert\n\nOptional Arguments\n\nkey:: String: the key the user wants to associate with the new vector\n\nReturns\n\n(key,Int): The tuple of the key (string) and ID (int) assigned to the inserted vector\n\nExample\n\n(key,id) = LMDiskANN.ann_insert!(index, vector)\n\n\n\n\n\n","category":"method"},{"location":"#LMDiskANN.clear_all_databases!-Tuple{Any, Any}","page":"Home","title":"LMDiskANN.clear_all_databases!","text":"clear_all_databases!(db_forward, db_reverse)\n\nRemoves all entries from both forward and reverse databases.\n\nArguments\n\ndb_forward: Forward mapping database handle\ndb_reverse: Reverse mapping database handle\n\n\n\n\n\n","category":"method"},{"location":"#LMDiskANN.close_databases-Tuple{Any, Any}","page":"Home","title":"LMDiskANN.close_databases","text":"close_databases(db_forward, db_reverse)\n\nCloses both databases.\n\n\n\n\n\n","category":"method"},{"location":"#LMDiskANN.close_id_mapping-Tuple{LMDiskANN.LMDiskANNIndex}","page":"Home","title":"LMDiskANN.close_id_mapping","text":"close_id_mapping(index::LMDiskANNIndex)\n\nCloses the ID mapping databases if they are open.\n\nArguments\n\nindex::LMDiskANNIndex: The index with ID mapping to close\n\nReturns\n\nLMDiskANNIndex: The updated index instance with ID mapping closed\n\nExample\n\nindex = LMDiskANN.close_id_mapping(index)\n\n\n\n\n\n","category":"method"},{"location":"#LMDiskANN.createIndex-Tuple{String, Int64}","page":"Home","title":"LMDiskANN.createIndex","text":"createIndex(path_prefix::String, dim::Int; maxdegree::Int=DEFAULT_MAX_DEGREE)\n\nCreates a brand new LM-DiskANN index on disk with the given dimension, storing to files: path_prefix.vec, path_prefix.adj, path_prefix.meta.\n\nArguments\n\npath_prefix::String: Prefix for the index files (without extension)\ndim::Int: Dimensionality of the vectors to be indexed\nmaxdegree::Int=DEFAULT_MAX_DEGREE: Maximum number of neighbors per node\n\nReturns\n\nLMDiskANNIndex: A new index instance\n\nExample\n\nindex = LMDiskANN.createIndex(\"my_index\", 128)\n\n\n\n\n\n","category":"method"},{"location":"#LMDiskANN.delete_by_id!-Tuple{Any, Any, Int64}","page":"Home","title":"LMDiskANN.delete_by_id!","text":"delete_by_id!(db_forward, db_reverse, internal_id::Int)\n\nDeletes the entry for internal_id in db_reverse, and also deletes the corresponding entry in db_forward.\n\n\n\n\n\n","category":"method"},{"location":"#LMDiskANN.delete_by_key!-Tuple{Any, Any, String}","page":"Home","title":"LMDiskANN.delete_by_key!","text":"delete_by_key!(db_forward, db_reverse, user_key::String)\n\nDeletes the entry for user_key in db_forward, and also deletes the corresponding entry in db_reverse.\n\n\n\n\n\n","category":"method"},{"location":"#LMDiskANN.get_embedding_from_id-Tuple{LMDiskANN.LMDiskANNIndex, Int64}","page":"Home","title":"LMDiskANN.get_embedding_from_id","text":"get_embedding_from_id(index::LMDiskANNIndex, id::Int) -> Vector{Float32}\n\nGiven a 1-based ID (the same ID you'd see returned by ann_insert! or in search), retrieve the stored embedding vector from index.vecs.\n\nThrows an error if id is out of range or if it's already deleted (i.e., in the freelist).\n\n\n\n\n\n","category":"method"},{"location":"#LMDiskANN.get_embedding_from_key-Tuple{LMDiskANN.LMDiskANNIndex, String}","page":"Home","title":"LMDiskANN.get_embedding_from_key","text":"get_embedding_from_key(index::LMDiskANNIndex, key::String) -> Union{Vector{Float32}, Nothing}\n\nARgument is a string key (which was stored during ann_insert!(..., key=...)), look up the 1-based ID from the forward DB, then retrieve the embedding.\n\nThrows an error if the key doesn't exist\n\n\n\n\n\n","category":"method"},{"location":"#LMDiskANN.get_id_from_key-Tuple{Any, String}","page":"Home","title":"LMDiskANN.get_id_from_key","text":"get_id_from_key(db_forward, user_key::String) -> Union{Int, Nothing}\n\nFetches the internalid associated with `userkeyfromdb_forward. Returnsnothing` if not found.\n\n\n\n\n\n","category":"method"},{"location":"#LMDiskANN.get_key_from_id-Tuple{Any, Int64}","page":"Home","title":"LMDiskANN.get_key_from_id","text":"get_key_from_id(db_reverse, internal_id::Int) -> Union{String, Nothing}\n\nFetches the userkey from `dbreversegiven the internal_id. Returnsnothing` if not found.\n\n\n\n\n\n","category":"method"},{"location":"#LMDiskANN.insert_key!-Tuple{Any, Any, String, Int64}","page":"Home","title":"LMDiskANN.insert_key!","text":"insert_key!(db_forward, db_reverse, user_key::String, internal_id::Int)\n\nInserts user_key -> internal_id into db_forward, and internal_id -> user_key into db_reverse.\n\nBoth must be done to keep them in sync.\n\n\n\n\n\n","category":"method"},{"location":"#LMDiskANN.list_all_keys-Tuple{Any}","page":"Home","title":"LMDiskANN.list_all_keys","text":"list_all_keys(db) -> Vector{String}\n\nReturns a list of all keys in the database as strings.\n\nArguments\n\ndb: LevelDB database handle\n\nReturns\n\nVector{String}: List of all keys in the database\n\n\n\n\n\n","category":"method"},{"location":"#LMDiskANN.loadIndex-Tuple{String}","page":"Home","title":"LMDiskANN.loadIndex","text":"loadIndex(path_prefix::String)\n\nLoads an existing LM-DiskANN index from disk.\n\nArguments\n\npath_prefix::String: Prefix for the index files (without extension)\n\nReturns\n\nLMDiskANNIndex: The loaded index instance\n\nExample\n\nindex = LMDiskANN.loadIndex(\"my_index\")\n\n\n\n\n\n","category":"method"},{"location":"#LMDiskANN.open_databases-Tuple{String, String}","page":"Home","title":"LMDiskANN.open_databases","text":"open_databases(forward_path::String, reverse_path::String; create_if_missing=true)\n\nOpens (or creates) two LevelDB databases:\n\ndbforward: stringkey -> stringofinternal_id\ndbreverse: stringofinternalid -> string_key\n\nReturns a tuple (dbforward, dbreverse).\n\n\n\n\n\n","category":"method"},{"location":"#LMDiskANN.search-Tuple{LMDiskANN.LMDiskANNIndex, AbstractVector{Float32}}","page":"Home","title":"LMDiskANN.search","text":"search(index::LMDiskANNIndex, query_vec::AbstractVector{Float32}; topk::Int=10)\n\nReturns top-k approximate nearest neighbors for query_vec.\n\nArguments\n\nindex::LMDiskANNIndex: The index to search\nquery_vec::AbstractVector{Float32}: The query vector\ntopk::Int=10: Number of nearest neighbors to return\n\nReturns\n\nTuple (key,id): Keys and IDs of the top-k nearest neighbors (string, int)\n\nExample\n\nresults = LMDiskANN.search(index, query_vec, topk=5)\n\n\n\n\n\n","category":"method"}]
}
